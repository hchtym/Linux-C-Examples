>>>>>>>
构造一个对象的过程：
分配内存空间
定义/构造成员变量
最后，调用构造函数

>>>>>>>
初始化列表
初始化列表在"定义/构造成员变量"的时候，就已经初始化赋值了；
也就是说在构造数据成员的时候，赋予特定的值。

补充：
但是，初始化列表要写在类里面才可以。

>>>>>>>
调用每一个成员函数的时候，this指针都会被编译器按照一个隐式的参数传递给
成员函数。

补充：
编译器不会给static方法传递this指针，所以static方法是不能访问非static数据成员的。

>>>>>>>
const成员函数
void show() const {/*...*/}

对于const对象只能调用const函数；
const函数和非const函数可以形成重载关系；非const对象默认调用非const成员函数.

注意mutable在const成员函数里面的应用；
补充：
mutable可以使得一个数据成员，可以在const方法里面也能被修改。

>>>>>>>>
析构函数
堆里面的对象不会直接调用析构函数，需要我们手动调用delete来释放。

最先构造的，后释放

>>>>>>>>>>>
new会调用类的构造函数，并且会自动的进行类型转换；
delete会调用对象的析构函数。
/*
  在构造函数里面分配的空间必须是堆里面的，如果是栈里面的话，
  则会在调用构造函数结束后又自动释放，所以，要使用new分配。
 */

>>>>>>>>>
拷贝构造函数

>>>>>>>>
static在class中的应用

>>>>>>>>>
函数参数的传递
    1.值传递
    2.地址传递(本质也是值传递)
    3.引用传递

>>>>>>>>>>
this指针
class A{
      int x;
      int y;
public:
      show(){}
      display(){}
};
成员函数必须通过对象来调用，每次调用成员函数，都会把当前对象的地址传递给函数。所以，成员函数中一定会有一个指针指向调用此函数的对象，这个指针就是this指针。

>>>>>>>>
const
类的成员函数如果没有修改成员变量，那么应该把该成员函数定义成const方法。这样的话const对象也可以调用该成员函数；非const对象既可以调用cosnt成员方法，也可以调用非const成员方法。

只有类的成员函数才可以声明为const；非成员函数不可以声明为const；因为成员函数声明为const意指不会修改类的数据称员，但是全局函数跟本就没有修改/不修改的对象，所以全局函数不可声明为const。

>>>>>>>>>>>
简单实现单例模式：一个类只能有一个对象：
class SingelObject{
private:
        string name;
        int age;
        static SingelObject object;
        
        SingelObject(){}
        SingelObject(const SingelObject& other){}
public:
        SingelObject& getObject(){return object;}
};
