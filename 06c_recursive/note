一、递归
递归会消耗大量的系统资源

sacnf("%*[^\n]");  //清空输入缓冲区，表示截取输入缓冲中的除去'\n'的所有字符
                              //在实际的使用中并没有知道怎样应用

scanf("%*c");   //忽略换行，在实际中很好用，表示匹配任意一个字符串
scanf中的"%*"代表输入缓冲的一段输入字符，'[]'中表示匹配特殊选项；'^\n'表示除去回车字符

static静态局部变量，在编译的时候只分配一次空间，直到程序运行结束才会释放空间

“函数的形参是自动局部变量”

二、指针
int x;
int *p=x;
*p=1234;   //间接寻址，x的值为1234
间接寻址消耗大量时间，推荐定义一个临时变量，换取节约时间
不要返回局部变量的地址；
可以返回静态局部变量的地址。

命令ldd：可以打印一个可执行文件使用的共享库文件
 ldd - print shared library dependencies

*p++;   // *(p++)

>>>>>
#include <stdio.h>
int main(  )
        {
                int aa[ 5 ];
                printf( "sizeof(aa)=%ld\n",sizeof( aa ) );
                printf( "sizeof(aa[ 0 ])=%ld\n",sizeof( aa[ 0 ] ) );
                printf( "aa=%p\n", aa );
                printf( "aa[ 0 ]=%p\n", &aa[ 0 ] );

                int *ppp=&aa[ 0 ];
                int ( *pp)[ 5 ]=&aa;   //对数组名进行取地址得到的指针为数组指针,++/--单位是整个数组的长度
                int *p=aa;                 //数组名代表一个int*,++/--单位仅是一个该类元素的长度
                return 0;
                
        }
