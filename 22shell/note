1. shell编程
    在shell script中 ‘#’用做注释

readonly
declare -r 
set
unset

Unix C/Linux C:
        shell编程
        内核API
         多进程
         多线程
         网络编程
         Curses全屏IOfile:///usr/share/doc/HTML/index.html
         GDB，MAKEFILE，程序库

shell  编程
＃ 注释
｀  time｀反引号     执行这个time命令，取得结果；
“”     字符串；
a=0      定义变量
b=100;
set      显示变量
$        取各变量的值
echo $b   取得变量的值用echo 显示；
‘’        一切不变；
“”       取得变量的值
“$sdf  fdf  $sdfs”      显示为sdf的值 fdf   sdfs的值
         {}隔开一个变量，
readonly   查看只读变量；
readonly   teacher   定义teacher为只读； 不能更改
unset teacher        删除一个变量  
export    teacher     导出为全局变量 空格隔开；
env     查看环境变量

注意：    [](())    计算里面的值不用加＄，

bc    计算
sacle   设置小数位宽度；
；分隔命令，
a=3
b=2
echo $[a**b]    a的b 次方
echo 3^2|bc      同上在bc中
echo date  +%t    只取时间；
#!  /bin/bash               指定用bash运行  which bash
shell运行是调用一个新shell执行；
.
    当前shell执行；
echo -n    不换行；
id -u   当用户UID;
logname  当前用户名；
a=(1 2 3 df fd s s df d s)    定义一个数组
数组可以不连续；
${b:-hell} 如果存在取b的值，不存在则取hell;
${b:=hell}如果存在取b的值，不存在则取hell;并且定义这个变量赋值
${b:+hell}如果不存在取空值，存在则取hell;
${b:？error,missige}如果存在取b的值，不存在输出错误信息，并终止shell;
echo ${#c}             测试一个变量值的长度；
echo ${#c[*]}        测试一个数组的长度；
echo ${a[*]}         查看数组a的所有元素；
read    a                  从那键盘输入一个值给a;
read   a   b              两个值的中间空格隔开；
                             如果少了，后面则是空值
                             如果多了，则把剩下的都给最后一个；
          -a    b          给b数组赋值；  
          -p   提示:        
shell                     空值和未定义的处理不同；
无：                     空值不显示；
有：                     显示错误
if    条件；   then  命令；else 命令；   fi;   表示结束；
if     ls2>/dve/null;echo error    0标准输入  1标准输出   2错误输出 
       2>&1                              把2和1重定向到同一文件
      else if==>elif                  

================================================================================
1.shell 脚本中的条件判断
	@ 返回Shell中 0 代表true；1 代表false
	@ 可以使用 test 或 [ ... ]执行shell测试，返回shell结果
	@ Bash 2.02版本以上可以使用 [[ ... ]]
        @ 返回常规编程语言格式的结果:
		(( ... )) 和 let... 还可以进行数字的比较

       测试条件：
       字符比较使用 ： ==,>,<,!=,>=,<=
       数字的比较   :  -eq,-gt,-lt,-ne,-le,-ge
       
       多个条件测试时：
		-a 逻辑与     -o 逻辑或  

       特殊操作符   && 和 ||
          &&,|| 不能使用在[ ... ]之间，只能使用在 [[ ... ]]之间 
	  • [[ ... ]] 测试相比 [ ... ]更为实用些,这是一个扩展测试命令
	  • 使用 [[ ... ]] 相对 [ ... ] 而言,可以防止在脚本中出现很多逻辑
	  上的错误信息,比如 &&,|| , < 和 >
	  • 在 [[ ... ]] 中自动计算十进制和8/16进制的值。

2.循环
	注意每个循环使用时
	∴首先,用在循环中的变量必须要在循环前 初始化
	∴对每次循环都需要对条件做测试
	∴在循环体中执行一次需要对循环 测试条件值修改


3.调试脚本
	当需要调试脚本错误时,你可以在 sh 或 bash 命令中使用 -v 和 -x 选项
	• 语法
	–bash 选项 {shell脚本}
	–-v 打印shell脚本执行的行号
	–-x 对每一个指令做展开计算
