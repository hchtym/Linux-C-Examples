>>>>>>>>
动态存储分配
动态分配适用于所有类型，但是多数情况下是对字符串、数组、结构体分配。
动态分配的内存空间是存放在“堆”里面的；
#include <stdib.h>
malloc
calloc
free
realloc
动态的分配内存C语言是做不到的，必须依靠标准库来实现内存的分配，
标准库函数也是通过向操作系统来进行申请内存。

>>>>>>>>
calloc 分配内存时进行初始化，每个里面初始化为0
malloc 分配内存，但是不会进行初始化，但是不同的编译器可能也会使其分配的空间初始化为0
两者的参数含义也不一样:
void *malloc(size_t size);
void *calloc(size_t nmemb, size_t size);
int a[5];
malloc(5*sizeof(int));
calloc(5,sizeof(int));

>>>>>>>>>
realloc
realloc扩展内存时，并不会对扩展的空间进行初始化；
如果扩充失败，返回NULL指针，原内存中的数据不会改变；
realloc可能会改变内存区域的起始位置，所以，一定要记录realloc的返回指针；
(realloc可能会将原来内存中的数据移动到一块满足空间要求的新的内存区域)

如果第一个参数为NULL时，realloc就相当于malloc:    realloc(NULL,40); ====  malloc(40);
如果第二个参数相当于调用free:  realloc(p,0);  ====  free(p);
realloc也可以缩短一块内存区域，它会释放减少的内存

>>>>>>>>>>
释放内存空间
free(p);
free只使用一个地址就可以释放一块内存，它怎么知道该块内存的大小？
free会按字节往后扫描内存，直到它碰到一个特殊的标记，就会认为到了结束的地方；
那个特殊的结束标记是malloc等动态函数分配内存是写上的。

访问越界可能导致修改了结束标记，所以，当调用free进行释放的时候，就会释放掉本不应该释放的内存，从而导致严重的
内存错误。

在调用free(p)以后，为了防止产生悬空指针，一般在free(p)后面紧接 p=NULL;
另外，空间在那个函数中分配空间，就应该在该函数中释放，绝对不应该在另外的函数中释放
本不应该由它释放的空间。

>>>>>>>>>>>

C99中的变长数组
int n;
scanf("%d",&n);
int aa[n];  //变长数组or动态数组

“内存区域的结束标志” 

>>>>>>>>>>>>>>
格式化输出
printf转换说明:
%标志 最小字段宽度 精度 长度修饰符 转换说明符

标志：
            - 减号 表示左对齐，默认右对齐
            +加号 显示数据的正负号
            # 如果是八进制则输出以0开头 %#0d，如果是16进制则以0x开头 %#0xd;
            0 零 用前导0填充
最小字段宽度：
             %10d
精度：
             %10.3f
长度修饰符：
             %lf  ;  %ld  %hd
转换说明符:asdasda
             %0d(8进制);  %0xd(16进制);

>>>>>>>>>>>
sprintf();

>>>>>>>>>>>
scanf();

int x,y;
scanf("%4d%5d",&x,&y);   //x截取4位整数，y截取5位的整数
scanf("%*d%d",&x);     //%*表示忽略一个某类型的输入
scanf("%[a-z]%[^a-z]",&str1,&str2);

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
流

文件指针
FILE *fp;     //FILE是一个结构体
文件指针:stdin,stdout,stderr
fopen()

>>>>>>>>>>>>>>
流结束符号EOF，一般情况下EOF 是 -1.

对一个字符：
getc/putc
ungetc()
fgetc()
fputc()

对于一行：
fgets()
fputs()
gets()
puts()

对于块：
fread();
fwrite();
注意：fwrite只是简单的把内存里面的数据原封不动的写入到
文件里面，所以，我们使用一般的文件查看的话会出现乱码～～
可以使用16进制查看：xxd
详见手册

fseek()操作文件指针

/*
 文件打开方式w+;r+是有区别的，w+会先建立该文件再读写
 r+不会新建一个文件，如果文件不存在则返回错误

另外，有些文本编辑器会在文件的末尾添加EOF文件结束符，所以，当你
从文件的末尾作为偏移基点时，要考虑到EOF占用一个文件指针位。
 */


在Linux中二进制可执行文件和普通的文本文件没有严格的区别。

