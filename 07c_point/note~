一、指针
字符串：不能两行分开，换行前要加'\'，然后从下一行开始写
存储字符串：字符数组保存
把以"\0"结尾的字符数组当成字符串
printf("%p","abcdef");   //输出字符串常量的地址

char *str="abcdef";
常量字符串保存在代码区，不可以修改；
但是指针变量本身可以修改；

char strary[10]="asdfsd";
字符数组定义的字符串放到栈区，其子符串可以改变；
数组名不能赋值(常量指针)；但可以改变每个元素的值；

二、字符串输出:
printf("adsg%dkfasd");  //这时会解释%d输出一个垃圾数据,可以使用下面的方法
printf("%s\n","adsfs%ddsfs");   //这样就不会解释%d
printf("%10.6s\n","sdfasfasd");  //格式输出10个字符，不够在前面添加空格，只截取字符串的前6个字符
puts(字符串);  //会输出字符串，但是会自动换一行
三、字符串输入:
char str[10];
scanf("%s",str2); //会把空格认为结束,空格不能用此输入，换行,空格,制表符等空白字符认为输入结束
char *str2; //指向一个未知的空间，是野指针
scanf("%s",str2); //有可能破坏数据，有可能出现段错误，有可能什么事也没有
gets(str);  //可以读取一行，而且不会在开始读取字符前跳过空白符
%ns代替%s   可用于限制读取的字符数为n；


const   常量关键字
   int a=10;
const int * pa=&a;  
   int b=20;
   pa=&b    合法；//pa本身可以被修改；
*pa=30;错误   //pa指向的空间不能通过pa修改a的值；
int * const pb=&b;//常量指针
  pb=&a;      //错误 ，pb指针本身不可能修改；

*pb＝200； 合法；//pb指向的空间可能修改；
   const int * pa    *pa不可改；pa可改；   元素不可改； 
  int * const pa       pa不可改，  ＊pa可改；地址不可改；

四、字符串数组
char str_ary[10][10]

str_ary[0]="ABCD";  //ERROR! [0]代表一个字符串不可以直接赋值，
strcpy(str_ary[0],"ABSCD") ;

sizeof(str_ary);  //100
sizeof(str_ary[0]);  //10

char* ss[5]={"abd","sdfsd","dsfas"};  //常量字符代表了其在代码区，不可被修改
strcpy(ss[0],"ABC"); //ERROR,代码区常量字符不可以被修改
ss[0]="ABC";  //正确，可以修改一个指针的指向


字符串和整数进行转换
atoi() ;   //字符串换成int


二、字符串函数
#include <string.h>
strcpy();
strncpy();
strncmp();
strcmp();
最好要把C语言标准库的库函数看一遍

/################################/
#include <stdio.h>

int main(  )
        {
                char ary[ 5 ];
                int i=0;
                
                while(i<4)
                        {
                                scanf( "%c",&ary[ i ] );
                                //scanf( "%*" );
                                scanf( "%*[^\n]" );
                                scanf( "%*c" );
                                ++i;
                        }
                ary[ 4 ]='\0';    //这一点很重要，否则使用printf( "%s" )时会出现乱码
                                        //printf是根据字符数组最后一位'\0'来判断字符数组结束的
                
                printf("%s\n" ,ary );
                return 0;
        }
