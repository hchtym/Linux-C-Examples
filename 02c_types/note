printf格式化字符串的标志符：

35L    被看成long int
35LL   被看成long long
3.5     被看成double
3.5f   被看成float
3.5L   被看成long float
printf( "sizeof( 3.5 )=%d\n",sizeof( 3.5 ) );   //输出结果为8


int 使用%d或%i                 unsigned int 使用%u
char 使用%c               float 使用%f
long 使用%ld               unsigned long使用%lu
short使用%hd             unsigned short使用%hu
地址使用%p              8进制 %o
%g            打印float/double回去掉尾0
%e%E       按照科学计数法打印数据
double使用%lf
16进制 %x或%X
打印%使用 %%

int var=64;
printf("%#x",var);    //0x40
printf("%x",var);      //40
同样
printf("%o",var);     //100
printf("%#o",var);   //0100



long double ld=4.56L;   注意4.56后面的L

long int 在各种系统中保证不小于4B

注意：int和unsigned int的不同范围
如果超过了每种类型的范围都会导致循环溢出

ASCII编码
'0' 48
'A' 65
'a'  97

在有的系统中char是指signed char,有的系统char是指unsigned char。

换行：另起一行  \n
回车：回到行首  \r
printf("abcde\rfs");
结果是：
fs

int a;
char c;
scanf("%d",&a);
scanf(" %c",&c);   //注意%前面的空格
由于输入的是一个char c，所以当输入一个int以后会留有一个回车符，这时
在scanf里面%的前面添加一个空格，表示忽略所有的空白符。

scanf("%d\n",&a);   //scanf中的\n会一直等待输入一个非空白符才结束scanf
scanf("%i",&a);     //%i可以输入8/10/16进制的整数,只要你输入时添加8/16进制的前缀就行

scanf("%d:%d",&h,&m); 
在scanf中引号中的格式字符，可以对应输入的字符串，即
输入>$   11:39   里面的:会对应scanf里面的:部分。

x=10;
sizeof(x=100);
printf("x=%d\n",x);    //x=10
sizeof()只关心它参数的类型，他不会帮你去执行x=100这条指令

>>>>>>>>>>>>>>>>>
格式化输出
printf转换说明:
%标志 最小字段宽度 精度 长度修饰符 转换说明符

标志：
            - 减号 表示左对齐，默认右对齐
            +加号 显示数据的正负号
            # 如果是八进制则输出以0开头 %#od，如果是16进制则以0x开头 %#0xd;
            0 零 用前导0填充
最小字段宽度：
             %10d
精度：
             %10.3f
长度修饰符：
             %lf  ;  %ld  %hd
转换说明符:asdasda
             %od(8进制);  %0xd(16进制);

>>>>>>>>>>>
sprintf();

>>>>>>>>>>>
scanf();

int x,y;
scanf("%4d%5d",&x,&y);   //x截取4位整数，y截取5位的整数
scanf("%*d%d",&x);     //%*表示忽略一个某类型的输入
scanf("%[a-z]%[^a-z]",&str1,&str2);







