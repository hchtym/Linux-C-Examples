>>>>>>>>>>>>>>>>>>>>>
介绍：
qt toolkit IDE（集成开发环境）
MFC
miniGui          嵌入式
UI类库           
<1>优良的跨平台特性windows Linux Mac_os
<2>面向对象signals/slots(信号槽) 代替callback模块化
<3>信号与槽的通讯机制
安装：
Linux:
      <1>解压缩
      <2>./configure   当前配置
      <3>./make
      <4>./make install 安装
嵌入式：
      <1>arm_linux-gcc   交叉编译工具 
qt坐标:
x:向右增长
y:向下
z:向内
 Qbject -Qwidget---QMianwindows  (窗口)
 QT中类的名字和头文件的名字相同
                  \ 
                   QDialong      (对话框)

QWidget:窗口部件类，所有用户界面类的基类，QDailog QMainWindow是它的两个很重要的子类。
  窗口部件：一个窗口上的一个原子组件

>>>>>>>>>>>>>>>>>>>

注意：
	1.工程的保存路径不要包含中文字符

>>>>>>>>>>>>>>>>>>>>
QApplication GUI类
<1>管理界面程序的控制流和主设置
<2>提供主事件循环
<3>任何一个Gui程序必须包含一个QApplication对象
   非Gui程序使用QCoreapplication
<4>整个程序范围内可以使用qApp指针访问到QApplication的一个对象。

>>>>>>>>>>>>>>>>>>>>

QWidget:
<1>所有用户界面类的一个基类
<2>所有的用户界面都就矩形 按Z轴排列
<3>没有父窗体的部件称为独立窗口，
   QMainWindow和QDialog是比较常用的窗口类型
常用方法和属性
<1>show()显示窗口部件，窗口在创建出来的时候默认是隐藏的
<2>hide()隐藏窗口
<3>raise()将窗口提升到所有窗口前面
<4>lower()将窗口降低到所有窗口后面
<5>close()关闭窗口
顶层窗口相关的：
<1>windowModified;窗口中的文档是否有没有保存过的更改
<2>windowTitle:窗口的标题
<3>windowIcon保存窗口的图标
<4>isActiveWindow:当前窗口是否是活动窗口

集合属性：
<1>pos:保存当前窗口部件相对于父窗体的位置，独立窗体相对于桌面。
<2> x,y 保存了当前窗口部件的x坐标y坐标。
<3> size;保存了当前窗口的大小；resize
<4>move(x,y)将窗口移动到指定位置

	step:
	     1.允许自动填充背景
	     2.准备调色板
	     3.设置窗体调色板

设置背景(前景)颜色的方法：
<1>将autoFillBackground属性设置为true;
<2>首先准备将要使用的颜色QColor
   然后定义一个QPalette 对象，使用其中的一个构造函数
   参数一：ColorRole QPalette::window       背景颜色
           QPalette::windowText             前景颜色
   参数二：QColor
<3>调用窗体的setPalette方法，设置调色板。

QWidget类属性：
<1>acceptDrops:该窗口的拖放事件是否被允许。默认false;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
修改鼠标的形状
	1.准备QCursor对象，使用第二个构造函数，Qt:CursorShape 枚举类型
	2.调用窗体的setCursor()方法

修改窗体的字体
	QFont 指定文本字体
	QFont(const QString& family,int pointSize=-1,int weight=-1,bool italic=false);
	QFont f("QFont::Times",16,12,true);
	w->setFont(f);

>>>>>>>>>>>>>>>>>>>>>>>
信号与槽 ：一种高级函数接口，应用与对象之间的通讯
信号与槽是QT特有的一种通讯方式，独立于标准的C/C++语言
类中如果有槽函数，必须包含宏定义：Q_OBJECT

使用形式：
	QObject::connect(发射对象，SIGNAL(信号)，接受对象，SLOT(槽函数));
	一个信号可以链接多个槽函数
	一个槽函数可以与多个信号链接
	一个信号可以与另外一个信号链接
	链接可以被移除: QObject::disconnect()

>>>>>>>>>>>>>>>>>>>>>>>
布局管理器：管理窗口部件的大小和位置

	QHBoxLayout 水平
	QVBoxLayout 垂直
	QGridLayout 网格

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
login登录对话框
	1.布局管理器的另外一个作用：将所管理的窗口部件的父窗体修改为当前窗体
	2.一个QWidget对象应该只有一个Layout与之绑定，其他的layout都可以addLayout添加到它的里面
	   然后，调用this->setLayout(globalLayout);来使之生效

QDialog:
对话框的基类，子类：QMessageBox QFileDialog
槽函数：
	1.accpet():隐藏对话框并将返回码QDialogode设置为：Accepted
	2.exec():显示对话框，并且一直阻塞到用户关闭，返回一个QDialogCode
	3.reject()：隐藏对话框，将返回码设置为:Rejected

QMessageBox:
提供一个对话框用来询问问题/通知用户