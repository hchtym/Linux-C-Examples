                  线程间互斥总结
====================================

>>>>>>>>>>>>
线程间互斥量的使用

pthread_mutex_init()   //初始化一个互斥量
pthread_mutex_destroy() //销毁一个互斥量
pthread_mutex_lock()    //加锁
pthread_mutex_trylock() //尝试加锁

NAME
   pthread_mutex_destroy, pthread_mutex_init - destroy and initialize a mutex
SYNOPSIS
       #include <pthread.h>
       int pthread_mutex_destroy(pthread_mutex_t *mutex);
       int pthread_mutex_init(pthread_mutex_t *restrict mutex,
              const pthread_mutexattr_t *restrict attr);
       pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

====================================
线程中使用信号量

sem_init()：初始化一个信号量 
sem_post()：释放一个信号量
#include <semaphore.h>
       int sem_post(sem_t *sem);
       Link with -lrt or -pthread.

sem_destroy():最后要销毁一个信号量

sem_wait():占用一个信号量
sem_trywait()：尝试占用一个信号量
NAME
       sem_wait, sem_timedwait, sem_trywait - lock a semaphore

SYNOPSIS
       #include <semaphore.h>
       int sem_wait(sem_t *sem);
       int sem_trywait(sem_t *sem);
       int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);
       Link with -lrt or -pthread.

=====================================
条件变量：
条件变量总是与互斥量一起使用。
NAME
 pthread_cond_destroy, pthread_cond_init - destroy and initialize condition variables
SYNOPSIS
       #include <pthread.h>
       int pthread_cond_destroy(pthread_cond_t *cond);
       int pthread_cond_init(pthread_cond_t *restrict cond,
              const pthread_condattr_t *restrict attr);
       pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

当主进程需要等待子线程完成特定动作以后再去执行。

占用一个条件变量：
NAME
       pthread_cond_timedwait, pthread_cond_wait - wait on a condition
SYNOPSIS
       #include <pthread.h>
       int pthread_cond_timedwait(pthread_cond_t *restrict cond,  
              pthread_mutex_t *restrict mutex,
              const struct timespec *restrict abstime);
       int pthread_cond_wait(pthread_cond_t *restrict cond,
              pthread_mutex_t *restrict mutex);


pthread_cond_wait()做三件事情：
	开始执行的时候首先解锁互斥量，然后等待条件变量的信号来临，信号来临以后就会再次对该互斥量进行加锁；
	注意：如果要加锁的时候，互斥锁已经被锁定，那么wait也会等待互斥锁的释放。


给条件变量发送信号：
NAME
       pthread_cond_broadcast, pthread_cond_signal - broadcast or signal a condition

SYNOPSIS
       #include <pthread.h>

       int pthread_cond_broadcast(pthread_cond_t *cond);
       int pthread_cond_signal(pthread_cond_t *cond);
These functions shall unblock threads blocked on a condition variable.

=========================================================================
select()
NAME
       select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO - synchronous I/O multiplexing

SYNOPSIS
       /* According to POSIX.1-2001 */
       #include <sys/select.h>

       /* According to earlier standards */
       #include <sys/time.h>
       #include <sys/types.h>
       #include <unistd.h>

       int select(int nfds, fd_set *readfds, fd_set *writefds,
                  fd_set *exceptfds, struct timeval *timeout);

       void FD_CLR(int fd, fd_set *set);
       int  FD_ISSET(int fd, fd_set *set);
       void FD_SET(int fd, fd_set *set);
       void FD_ZERO(fd_set *set);

       #include <sys/select.h>

       int pselect(int nfds, fd_set *readfds, fd_set *writefds,
                   fd_set *exceptfds, const struct timespec *timeout,
                   const sigset_t *sigmask);
select()  and pselect() allow a program to monitor multiple file descriptors, waiting until one or more of
       the file descriptors become "ready" for some class of  I/O  operation  (e.g.,  input  possible).   A  file
       descriptor  is  considered  ready  if  it  is  possible  to perform the corresponding I/O operation (e.g.,
       read(2)) without blocking.

 *注意：select在返回的时候，会修改描述符集，它只会保留状态改变的文件描述符，
 *      可以说它的调用是一次性的，每次都应该重新设置描述符集，所以把四句拿到循环
 *      外面的时候，会出现只有一个链接的问题。

restrict：表示该变量只有一个指针指向它。



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
参考资料：
了解 pthread_cond_wait() 的作用非常重要 -- 它是 POSIX 线程信号发送系统的核心，也是最难以理解的部分。

首先，让我们考虑以下情况：线程为查看已链接列表而锁定了互斥对象，然而该列表恰巧是空的。这一特定线程什么也干不了 -- 其设计意图是从列表中除去节点，但是现在却没有节点。因此，它只能：

锁定互斥对象时，线程将调用 pthread_cond_wait(&mycond,&mymutex)。pthread_cond_wait() 调用相当复杂，因此我们每次只执行它的一个操作。

pthread_cond_wait() 所做的第一件事就是同时对互斥对象解锁（于是其它线程可以修改已链接列表），并等待条件 mycond 发生（这样当 pthread_cond_wait() 接收到另一个线程的“信号”时，它将苏醒）。现在互斥对象已被解锁，其它线程可以访问和修改已链接列表，可能还会添加项。 【要求解锁并阻塞是一个原子操作】

此时，pthread_cond_wait() 调用还未返回。对互斥对象解锁会立即发生，但等待条件 mycond 通常是一个阻塞操作，这意味着线程将睡眠，在它苏醒之前不会消耗 CPU 周期。这正是我们期待发生的情况。线程将一直睡眠，直到特定条件发生，在这期间不会发生任何浪费 CPU 时间的繁忙查询。从线程的角度来看，它只是在等待 pthread_cond_wait() 调用返回。

现在继续说明，假设另一个线程（称作“2 号线程”）锁定了 mymutex 并对已链接列表添加了一项。在对互斥对象解锁之后，2 号线程会立即调用函数 pthread_cond_broadcast(&mycond)。此操作之后，2 号线程将使所有等待 mycond 条件变量的线程立即苏醒。这意味着第一个线程（仍处于 pthread_cond_wait() 调用中）现在将苏醒。

现在，看一下第一个线程发生了什么。您可能会认为在 2 号线程调用 pthread_cond_broadcast(&mymutex) 之后，1 号线程的 pthread_cond_wait() 会立即返回。不是那样！实际上，pthread_cond_wait() 将执行最后一个操作：重新锁定 mymutex。一旦 pthread_cond_wait() 锁定了互斥对象，那么它将返回并允许 1 号线程继续执行。那时，它可以马上检查列表，查看它所感兴趣的更改。

停止并回顾！
那个过程非常复杂，因此让我们先来回顾一下。第一个线程首先调用：
pthread_mutex_lock(&mymutex);
然后，它检查了列表。没有找到感兴趣的东西，于是它调用：
pthread_cond_wait(&mycond, &mymutex);
然后，pthread_cond_wait() 调用在返回前执行许多操作：
pthread_mutex_unlock(&mymutex);
它对 mymutex 解锁，然后进入睡眠状态，等待 mycond 以接收 POSIX 线程“信号”。一旦接收到“信号”（加引号是因为我们并不是在讨论传统的 UNIX 信号，而是来自 pthread_cond_signal() 或 pthread_cond_broadcast() 调用的信号），它就会苏醒。但 pthread_cond_wait() 没有立即返回 -- 它还要做一件事：重新锁定 mutex：

pthread_mutex_lock(&mymutex);

pthread_cond_wait() 知道我们在查找 mymutex “背后”的变化，因此它继续操作，为我们锁定互斥对象，然后才返回。 